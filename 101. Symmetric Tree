Time: O(n)  Space: O(height)
--> Recursive

class Solution {
public:
    bool fun(TreeNode* l,TreeNode* r){
        if(l==nullptr or r==nullptr)
            return l==r;
        if(l->val != r->val)
            return false;
        bool x=fun(l->left,r->right);
        bool y=fun(l->right,r->left);
        return x && y;
    }
    
    bool isSymmetric(TreeNode* root) {
        if(!root)
            return true;
        return fun(root->left,root->right);
    }
};

Time: O(n)  Space: O(n)
--> Iterative

 bool isSymmetric(TreeNode* root) {
        if(!root)
            return true;
        queue<TreeNode*> q1,q2;
        if(root->left or root->right){
            if(root->left and root->right){
                 q1.push(root->left);
                 q2.push(root->right);
            }else
                return false;
        }
        while(!q1.empty() and !q2.empty()){
            TreeNode* c1=q1.front();
            TreeNode* c2=q2.front();
            q1.pop();q2.pop();
            if(c1->val != c2->val)
                return false;
            if(c1->left or c2->right){
                if(c1->left and c2->right)
                    q1.push(c1->left),q2.push(c2->right);
                else
                    return false;
            } 
            if(c1->right or c2->left){
                if(c1->right and c2->left)
                    q1.push(c1->right),q2.push(c2->left);
                else
                    return false;
            }     
        }
        if(q1.empty() and q2.empty())
            return true;
        return false;
    }
};

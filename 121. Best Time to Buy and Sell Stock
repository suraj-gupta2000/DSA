Time: O(n^2)  Space: O(1)
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        int res=0;
        for(int i=0;i<n-1;i++){
            for(int j=i+1;j<n;j++){
                res=max(res,prices[j]-prices[i]);
            }
           
        }
        return res;
    }
};

Time: O(n)  Space: O(1)
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        int least_price=INT_MAX;
        int profit=0;
        for(int i=0;i<n;i++){
            least_price=min(least_price,prices[i]);
            int t_profit=prices[i]-least_price;
            profit=max(profit,t_profit);
        }
        return profit;
    }
};

Time: O(n)  space: O(n)  Using Kadane's Algo(SubArray Sum)
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<int> diff(n);
        for(int i=1;i<n;i++){
            diff[i]=prices[i]-prices[i-1];
        }
        //Kadane's Algo
        int res,maxending;
        res=maxending=diff[0];
        for(int i=1;i<n;i++){
            maxending=max(maxending+diff[i],diff[i]);
            res=max(res,maxending);
        }
        return res;
    }
};

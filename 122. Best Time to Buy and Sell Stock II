Time: O(2^n)  space: O(n) -->Recursion(TLE)

class Solution {
public:
    int f(int ind,int buy,vector<int> &prices,int n){
        if(ind==n)
            return 0;
        int profit=0;
        if(buy){
            profit = max(-prices[ind]+f(ind+1,0,prices,n),
                        0+f(ind+1,1,prices,n)
                        );
        }else{
            profit=max(prices[ind]+f(ind+1,1,prices,n),
                      0+f(ind+1,0,prices,n)
                      );
        }
        return profit;
    }
    
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        return f(0,1,prices,n);
    }
};

Time: O(n)  Space: O(n)

Time: O(n)  Space: O(1)

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        int res=0;
        for(int i=1;i<n;i++){
            int temp=prices[i]-prices[i-1];
            if(temp>0)
                res+=temp;
        }
        return res;
    }
};

Time: O(n^2)  Space: O(n)

class Solution {
public:
    
    vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {
        vector<pair<int,int>> v;
        int n=mat.size(),m=mat[0].size();
        int c=0;
        for(int i=0;i<n;i++){
            int c=0;
            for(int j=0;j<m;j++){
                if(mat[i][j]==1)
                    c++;
            }
            v.push_back({c,i});
        }
        sort(v.begin(),v.end());
        vector<int> a(k);
        int i=0;
        for(int x:a){
            a[i]=v[i].second; i++;
        }    
        return a;
    }
};

Time: O(n log n)  Space: O(n)

class Solution {
public:
    vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {
        int n=mat.size(),m=mat[0].size();
        for(int i=0;i<n;i++){
            mat[i].push_back(i);
        }
        sort(begin(mat),end(mat));
        vector<int> res(k);
        for(int i=0;i<k;i++)
            res[i]=mat[i][m];
        return res;
    }
};

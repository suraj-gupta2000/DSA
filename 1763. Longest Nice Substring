Time: O(n^3)  Space: O(1)

class Solution {
public:
    bool nice(string str){
        int n=size(str);
        for(int i=0;i<n;i++){
            char t=str[i];
            t= t<=90 ? t+32 : t-32 ;
            if(str.find(t)==string::npos)
                return false;
        }
        return true;
    }
    
    string longestNiceSubstring(string s) {
        int n=size(s);
        string res="";
        for(int i=0;i<n;i++){
            string t="";
            t+=s[i];
            for(int j=i+1;j<n;j++){
                t+=s[j];
                if( nice(t) and (t.size()>res.size()) )
                    res=t;
            }
        }
        return res;
    }
};

Time: O(n*k)  Space: O(1)
-->TLE

class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int n=nums.size();
        k=k%n;
        for(int i=1;i<=k;i++){
            int temp=nums[n-1];
            for(int j=n-1;j>0;j--){
                nums[j]=nums[j-1];
            }
            nums[0]=temp;
        }
    }
};

Time: O(n)  Space: O(n)

class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        vector<int> v,u;
        int l=nums.size();
        k=k%l;
        for(int j=l-k;j<l;j++)
            v.push_back(nums[j]);
        for(int i=0;i<l-k;i++)
            u.push_back(nums[i]);
        for(int i=0;i<l;i++){
            if(i<k)
            nums[i]=v[i];
            else
                nums[i]=u[i-k];
        }
    }
};


Time: O(n)  Space: O(1)

class Solution {
public:
    void reverse(vector<int>& nums,int i,int j){
         while(i<j){
             swap(nums[i],nums[j]);
             i++,j--;
         }
    }
    void rotate(vector<int>& nums, int k) {
        int n=nums.size();
        k = k%n;
            int i=n-k,j=n-1;
            reverse(nums,i,j);
            i=0,j=n-k-1;
            reverse(nums,i,j);
            i=0,j=n-1;
            reverse(nums,i,j);
    }
};

Time: O(n^2)  Space: O(1)
--> TLE

class Solution {
public:
    bool containsNearbyDuplicate(vector<int>& nums, int k) {
        int n=size(nums);
        for(int i=0;i<n-1;i++){
            for(int j=i+1;j<n;j++){
                if(nums[i]==nums[j] and abs(i-j)<=k)
                    return true;
            }
        }
        return false;
    }
};

Time: O(n^2)  Space: O(n)
--> Passed

class Solution {
public:
    bool containsNearbyDuplicate(vector<int>& nums, int k) {
        int n=size(nums);
        map<int,vector<int> > m;
        for(int i=0;i<n;i++){
            m[nums[i]].push_back(i);
        }
        for(auto& x: m){
            int n1=x.second.size();
            if(n1==1)
                continue;
            int t=x.second[0];
            for(int i=0;i<n1-1;i++){
                for(int j=i+1;j<n1;j++){
                    if(x.second[j]-x.second[i] <= k)
                        return true;
                }
            }
        }
        return false;
    }
};

Time: O(n)  Space: O(n)
--> Bad Approach

class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(head==nullptr || head->next==nullptr)
            return true;
        vector<int> v;
        while(head!=nullptr){
            v.push_back(head->val);
            head=head->next;
        }
        int n=v.size();
        int i=0,j=n-1;
        while(i<j){
            if(v[i]!=v[j])
                return false;
            i++;j--;
        }
        return true;  
    }
};

Time: O(n)  Space: O(n)

class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(!head or !head->next)
            return true;
        stack<int> s;
        auto temp=head;
        while(temp){
            s.push(temp->val);
            temp=temp->next;
        }
        while(head){
            int x=s.top();s.pop();
            if(head->val!=x)
                return false;
            head=head->next;
        }
        return true;
    }
};


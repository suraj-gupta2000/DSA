Time: O(n)  Space: O(1)

class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int n=nums.size();
        int k=(n*(n+1))/2,sum=0;
        for(auto x: nums){
            sum+=x;
        }
        return k-sum;
    }
};

Time: O(n) Space: O(1)  
--> Using XOR

class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int n=nums.size();
        int res=n;
        for(int i=0;i<n;i++){
            res^=(nums[i]^i);
        }
        return res;
    }
};

Time: O(n*Logn)  Space: O(1)
--> Binary Search

class Solution {
public:
    int missingNumber(vector<int>& nums) {
        sort(begin(nums),end(nums));
        int l=0,h=nums.size(),mid;
        while(l<h){
            mid=(l+h)/2;
            if(mid==nums[mid])
                l=mid+1;
            else if(mid<nums[mid])
                h=mid;
        }
        return l;
    }
};

Time: (2^n)  space: O(n) --->recursion (TLE)

class Solution {
public:
    int f(int ind,int buy,vector<int> &prices,int n){
        if(ind>=n)
            return 0;
        if(buy){
            return max(-prices[ind]+f(ind+1,0,prices,n),
                      0+f(ind+1,1,prices,n)
                      );
        }else{
            return max(prices[ind]+f(ind+2,1,prices,n),
                      0+f(ind+1,0,prices,n)
                      );
        }
    }
    
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        return f(0,1,prices,n);
    }
};

Time: O(n)  Space: O(n)  -->DP

class Solution {
public:
    int f(int ind,int buy,vector<int> &prices,int n,vector<vector<int>> &dp){
        if(ind>=n)
            return 0;
        if(dp[ind][buy]!=-1)
            return dp[ind][buy];
        if(buy){
            return dp[ind][buy]=max(-prices[ind]+f(ind+1,0,prices,n,dp),
                      0+f(ind+1,1,prices,n,dp)
                      );
        }else{
            return dp[ind][buy]=max(prices[ind]+f(ind+2,1,prices,n,dp),
                      0+f(ind+1,0,prices,n,dp)
                      );
        }
    }
    
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<int>> dp(n,vector<int>(2,-1));
        return f(0,1,prices,n,dp);
    }
};

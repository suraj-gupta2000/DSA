Time: O(2^n)  Space: O(n) 
--> Using Recursion

class Solution {
public:
    int fib(int n) {
        if(n==0)
            return 0;
        else if(n==1)
            return 1;
        else{
            return fib(n-1)+fib(n-2);
        }
    }
};

Time: O(n)  Space: O(n)
--> Memomization

class Solution {
public:
    int dp[31]={0};
    int fib(int n) {
        if(n<=1)
            return n;
        else if(dp[n] != 0)
            return dp[n];
        return dp[n]=fib(n-1)+fib(n-2);
    }
};

--> WIthout using Global variable

class Solution {
public:
    int f(int n,vector<int>& dp){
        if(n<=1)
            return n;
        else if(dp[n]!= -1)
            return dp[n];
        return dp[n]=f(n-1,dp)+f(n-2,dp);
    }
    int fib(int n) {
        vector<int> dp(n+1,-1);
        return f(n,dp);
    }
};

Time: O(n)   Space: O(n)   Using DP

class Solution {
public:
    
    int fib(int n) {
        if(!n)
            return 0;
        int dp[n+1];
        dp[0]=0;dp[1]=1;
        for(int i=2;i<n+1;i++){
            dp[i]=dp[i-1]+dp[i-2];
        }
        return dp[n];
    }
};

Time: O(n)  Space: O(1) 

class Solution {
public:
    int fib(int n) {
        if(n<2)
            return n;
        int a=0,b=1,c=0;
        for(int i=2;i<=n;i++){
            c=a+b;
            a=b;
            b=c;
        }
        return c;
    }
};

Time: O(1)   Space: O(1)  Using Binet's Nth formula 

class Solution {
public:
    int fib(int n) {
        double Phi=(sqrt(5)+1)/2;
        int res=round(pow(Phi,n)/sqrt(5));
        return res;
    }
};


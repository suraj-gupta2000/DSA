TC: O(2^n)  SC: O(Path length)
-->Recursion (TLE)

class Solution {
public:
    int f(int i,int j){
        if(i==0 && j==0)
            return 1;
        if(i<0 || j<0)
            return 0;
        int up=f(i-1,j);
        int left=f(i,j-1);
        return up+left;
    }
    int uniquePaths(int m, int n) {
        return f(m-1,n-1);
    }
};

TC: O(m*n)  SC: O(m*n) + O(m-1 +n-1)
--> Memoiation

class Solution {
public:
    int f(int i,int j,vector<vector<int>> &dp){
        if(i==0 && j==0)
            return 1;
        if(i<0 || j<0)
            return 0;
        if(dp[i][j]!= -1)
            return dp[i][j];
        int up=f(i-1,j,dp);
        int left=f(i,j-1,dp);
        return dp[i][j]= up+left;
    }
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m,vector<int> (n,-1));
        return f(m-1,n-1,dp);
    }
};

TC: O(m*n) SC: O(n*m)
--> Tabulation

class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m,vector<int> (n,0));
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(i==0 and j==0)
                    dp[i][j]=1;
                else{
                    int down=0,right=0;
                    if(i-1>=0)  down=dp[i-1][j];
                    if(j-1>=0) right=dp[i][j-1];
                    dp[i][j]=down+right;
                }
            }
        }
        return dp[m-1][n-1];
    }
};

TC: O(m*n) SC: O(n+n)
--> Space Optimized

class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<int> prev(n,0);
        for(int i=0;i<m;i++){
            vector<int> cur(n,0);
            for(int j=0;j<n;j++){
                if(i==0 and j==0)
                    cur[j]=1;
                else{
                    int down=0,right=0;
                    if(i-1>=0)  down=prev[j];
                    if(j-1>=0) right=cur[j-1];
                    cur[j]=down+right;
                }
            }
            prev=cur;
        }
        return prev[n-1];
    }
};

TC: O(n) SC: O(1)
--> Math (P&C)

class Solution {
public:
    int uniquePaths(int m, int n) {
        if(m==1 or n==1)
            return 1;
        m--,n--;
        if(m<n){
           swap(m,n);
        }
        long res=1,j=1;
        for(int i=m+1;i<=m+n;i++,j++){
            res*=i;
            res/=j;
        }
        return (int)res;
    }
};

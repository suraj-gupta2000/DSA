TC: O(log n)  SC: O(1)
-->Binary Search

class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int n=size(nums);
        int l=0,h=n-2;
        while(l<=h){
            int m=(l+h)>>1;
            if(nums[m]==nums[m^1]){
                l=m+1;
            }else
                h=m-1;
        }
        return nums[l];
    }
};

TC: O(n)  SC: O(1)
-->Using XOR

class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int n=size(nums);
        int res=0;
        for(int x: nums)
            res^=x;
        return res;
    }
};

TC: O(n)  SC: O(1)
--> Linear Search

class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int n=size(nums);
       for(int i=0;i+1<n;i=i+2){
           if(nums[i]!=nums[i+1])
               return nums[i];
       }
        return nums[n-1];
    }
};

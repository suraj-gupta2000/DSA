Time: O(n*Log n)  Space: O(Log n)

class Solution {
public:
    int maximumProduct(vector<int>& nums) {
        sort(begin(nums),end(nums));
        int n=size(nums);
        int res=nums[n-1]*nums[n-2]*nums[n-3];
        res=max(nums[0]*nums[1]*nums[n-1],res);
        return res;
    }
};

Time: O(n)  Space: O(1)

class Solution {
public:
    int maximumProduct(vector<int>& nums) {
        int m1,m2,m3,n1,n2;
        m1=m2=m3=INT_MIN;
        n1=n2=INT_MAX;
        for(auto& n : nums){
            if(n>m1)
                m3=m2,m2=m1,m1=n;
            else if(n>m2)
                m3=m2,m2=n;
            else if(n>m3)
                m3=n;
            if(n<n1)
                n2=n1,n1=n;
            else if(n<n2)
                n2=n;
        }
       int res = max(m1*m2*m3,m1*n1*n2);
        return res;
    }
};

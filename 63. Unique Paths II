TC: O(2^n)  SC: O(path length)
-->recursion (TLE)

class Solution {
public:
    int f(int i,int j,vector<vector<int>>& og){
        if(i==0 and j==0){
            if(og[i][j]==1)
                return 0;
            else
                return 1;
        }
        if(i<0 or j<0)
            return 0;
        if(og[i][j]==1)
            return 0;
        int up=f(i-1,j,og);
        int left=f(i,j-1,og);
        return up+left;
    }
    int uniquePathsWithObstacles(vector<vector<int>>& og) {
        int m=og.size(),n=og[0].size();
        return f(m-1,n-1,og);
    }
};

TC: O(m*n) SC: O(m*n) + O(Path Length)
--> Memoiation

class Solution {
public:
    int f(int i,int j,vector<vector<int>>& og,vector<vector<int>> &dp){
        if(i==0 and j==0){
            if(og[i][j]==1)
                return 0;
            else
                return 1;
        }
        if(i<0 or j<0)
            return 0;
        if(og[i][j]==1)
            return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        int up=f(i-1,j,og,dp);
        int left=f(i,j-1,og,dp);
        return dp[i][j]= up+left;
    }
    int uniquePathsWithObstacles(vector<vector<int>>& og) {
        int m=og.size(),n=og[0].size();
        vector<vector<int>> dp(m,vector<int> (n,-1));
        return f(m-1,n-1,og,dp);
    }
};

TC: O(m*n)  SC: O(m*n)
-->Tabulation

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& og) {
        int m=og.size(),n=og[0].size();
        vector<vector<int>> dp(m,vector<int> (n,0));
        if(og[0][0]==1) return 0;
        dp[0][0]=1;
        for(int i=1;i<m;i++){
            if(og[i][0]==1)
                dp[i][0]=0;
            else
                dp[i][0]=dp[i-1][0];
        }
        for(int j=1;j<n;j++){
            if(og[0][j]==1)
                dp[0][j]==0;
            else
                dp[0][j]=dp[0][j-1];
        }
        for(int i=1;i<m;i++){
            for(int j=1;j<n;j++){
                if(og[i][j]==1){
                    dp[i][j]=0;continue;
                }
                int d=0,r=0;
                if(i-1>=0) d=dp[i-1][j];
                if(j-1>=0) r=dp[i][j-1];
                dp[i][j]=d+r;
            }
        }
        return dp[m-1][n-1];
    }
};

TC: O(2^n)  SC: O(path length)
--> REcursion

class Solution {
public:
    int f(int i,int j,vector<vector<int>> &grid){
        if(i==0 and j==0)
            return grid[0][0];
        if(i<0 or j<0) return 1e9;
        int up=grid[i][j]+f(i-1,j,grid);
        int left=grid[i][j]+f(i,j-1,grid);
        return min(up,left);
    }
    
    int minPathSum(vector<vector<int>>& grid) {
        int m=grid.size(),n=grid[0].size();
        return f(m-1,n-1,grid);
    }
};

TC: O(m*n)  SC: O(m*n) + O(Path length)
-->Memoiation

class Solution {
public:
    int f(int i,int j,vector<vector<int>> &grid,vector<vector<int>> &dp){
        if(i==0 and j==0)
            return grid[0][0];
        if(i<0 or j<0) return 1e9;
        if(dp[i][j]!=-1) return dp[i][j];
        int up=grid[i][j]+f(i-1,j,grid,dp);
        int left=grid[i][j]+f(i,j-1,grid,dp);
        return dp[i][j]= min(up,left);
    }
    
    int minPathSum(vector<vector<int>>& grid) {
        int m=grid.size(),n=grid[0].size();
        vector<vector<int>> dp(m,vector<int> (n,-1));
        return f(m-1,n-1,grid,dp);
    }
};

TC: O(m*n)  SC: O(m*n)
--> Tabulation

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m=grid.size(),n=grid[0].size();
        vector<vector<int>> dp(m,vector<int> (n,0));
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(i==0 and j==0)
                    dp[i][j]=grid[i][j];
                else{
                    int d=grid[i][j];
                    if(i-1>=0) d+=dp[i-1][j];
                    else d=1e9;
                    int r=grid[i][j];
                    if(j-1>=0) r+=dp[i][j-1];
                    else r=1e9;
                    dp[i][j]=min(d,r);
                }
            }
        }
        return dp[m-1][n-1];
    }
};

Time: O(n*Log n)  Space: O(n)
--> Sorting

class Solution {
public:
    vector<int> findErrorNums(vector<int>& nums) {
        sort(begin(nums),end(nums));
        int n=nums.size();
        int res1,res2=0;
        for(int i=0;i<n-1;i++){
            if(nums[i]==nums[i+1]){
                res1=nums[i];
                nums[i]=0;
                break;
            }
        }
        for(int i=0;i<n;i++){
            res2^=nums[i]^(i+1);
        }
        return {res1,res2};
    }
};

Time: O(n)  Space: O(n)
--> Map

class Solution {
public:
    vector<int> findErrorNums(vector<int>& nums) {
        int n=nums.size();
        int res1,res2;
        map<int,int> m;
        for(int x: nums){
            m[x]++;
            if(m[x]==2){res1=x;break;}
        }
        res2=res1;
        for(int i=0;i<n;i++){
            res2^=nums[i]^(i+1);
        }
        return {res1,res2};
    }
};

Time: O(n)  Space: O(1)

class Solution {
public:
    vector<int> findErrorNums(vector<int>& nums) {
        int n=nums.size();
        int res1,res2=0;
        for(int x:nums){
            if(nums[abs(x)-1]<0)
                res1=abs(x);
            else
                nums[abs(x)-1]*=-1;
        }
        for(int i=0;i<n;i++){
            if(nums[i]>0)
                res2=i+1;
        }
        return {res1,res2};
    }
};


Time: O(n)  Space: O(1)
--> Bit Manipulation

class Solution {
public:
    vector<int> findErrorNums(vector<int>& nums) {
        int n=nums.size();
        int x=0,t1=0,t2=0;
        for(int i=0;i<n;i++){
            x^=nums[i]^(i+1);
        }
        int rsb= x & ~(x-1);
        for(int i:nums){
            if((i&rsb))
                t1^=i;
            else
                t2^=i;
        }
        for(int i=1;i<=n;i++){
            if((i&rsb))
                t1^=i;
            else
                t2^=i;
        }
        for(int i:nums){
            if(i==t1)
                return {t1,t2};
        }
        return {t2,t1};
    }
};

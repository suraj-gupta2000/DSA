Time: O(log n)  Space: O(1)

class Solution {
public:
    bool hasAlternatingBits(int n) {
        int k=n&1;
        n=n>>1;
        while(n){
            if(k==(n&1))
                return false;
            k=n&1;
            n>>=1;
        }
        return true;
    }
};

Time : O(log n)  Space: O(1)

class Solution {
public:
    bool hasAlternatingBits(int n) {
        long x=1;                     // 1 = 1
        while(x<=n){                  // 2 = 10
            if(x==n)                  // 5 = 101
                return true;          //10 = 1010
            else if(x%2==0)           //21 = 10101
                x=2*x+1;              //42 = 101010
            else                      //85 = 1010101
                x=2*x;
        }
        return false;
    }
};

--> METHOD 3: Cancle Bits

class Solution {
public:
    bool hasAlternatingBits(int n) {
                                 //  n=1010101
        int x=n>>2;              //  x=10101
        x=x^n;                   //  x=1000000  x-1 = 0111111
        x=x&(x-1);               //  x=0000000
        if(!x)
            return true;
        return false;
    }
};

--> Method 4: Complete Bits

class Solution {
public:
    bool hasAlternatingBits(int n) {
                                 // n = 101010
         long x=n>>1;            // x = 010101
        x=x^n;                   // x = 111111  x+1 = 1000000
        x=x&(x+1);               // x = 000000
        if(!x)
            return true;
        return false;
        
    }
};

Time : O(log n)  Space: O(1)

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int n=nums.size();
        if(nums[0]>target or nums[n-1]<target)
            return -1;
        int i=0,j=n-1;
        while(i<=j){
            int mid=(i+j)/2;
            if(nums[mid]==target)
                return mid;
            else if(nums[mid]>target)
                j=mid-1;
            else
                i=mid+1;
        }
        return -1;
    }
};

--> Method 2

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int n=nums.size();
        int res=lower_bound(nums.begin(),nums.end(),target)-nums.begin();
        if(res<n && nums[res]==target)
            return res;
        return -1;
    }
};

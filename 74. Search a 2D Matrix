Time: O(n)  Space: O(1)
--> Using Loop

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& m, int t) {
        int ms=m.size();
        int n=m[0].size();
        int j=0;
        for(int i=ms-1;i>=0;i--){
            if(m[i][j]>t){ continue; }
            for( j=0;j<n;j++){
                if(m[i][j]==t)
                    return true;
            }
            return false;
        }
        return false;
    }
};

Time: O(log m*n)  Space: O(1)
--> Binary Search:  For Matrix nXm ==> a[x]==mat[x/m][x%m]
    Treat matrix as 1D array

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& mat, int t) {
        int n=mat.size(),m=mat[0].size();
        int l=0,h=n*m-1,mid;
        while(l<=h){
           mid=(l+h)/2;
            int k=mat[mid/m][mid%m];
            if(k==t)
                return 1;
            else if(k<t)
                l=mid+1;
            else
                h=mid-1;
        }
        return 0;
    }
};

--> Optimised version of above code

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& mat, int t) {
        int n=mat.size(),m=mat[0].size();
        int l=0,h=n*m-1,mid;
        while(l!=h){
           mid= (l+h) >> 1;
            int k=mat[mid/m][mid%m];
            if(k<t)
                l=mid+1;
            else
                h=mid;
        }
        return (mat[h/m][h%m]==t);
    }
};

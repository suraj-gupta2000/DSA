Time: O((r-l)*Log n)  Space: O(1)

class Solution {
public:
    bool prime(int x){
        if(x==1)
            return 0;
        else if(x==2 or x==3 or x==5)
            return 1;
        else if(x%2==0 or x%3==0 or x%5==0)
            return 0;
        else{
            return 1;
            }
    }
    
    int countPrimeSetBits(int l, int r) {
        int res=0;
        for(int i=l;i<=r;i++){
            int x=__builtin_popcount(i);
            if(prime(x))
                res++;
        }
        return res;
    }
};
Time: O((r-l)*Log n)  Space: O(1)
--> 665772 == 0b10100010100010101100

class Solution {
public:
    int countPrimeSetBits(int l, int r) {
        int res=0,c=665772;
        for(int i=l;i<=r;i++){
            int x=__builtin_popcount(i);
            if((c>>x)&1)
                res++;
        }
        return res;
    }
};

Time: O((r-l)*Log n)  Space: O(1)

class Solution {
public:
    
    int countPrimeSetBits(int l, int r) {
        int res=0;
        vector<int> v={2,3,5,7,11,13,17,19};
        for(int i=l;i<=r;i++){
            int x=__builtin_popcount(i);
            if(find(begin(v),end(v),x)!=v.end())
                res++;
        }
        return res;
    }
};

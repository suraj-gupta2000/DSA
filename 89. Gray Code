Time: O(n^2)  Space: O(2^n)
--> using DP and Creating Table

class Solution {
public:
    vector<int> grayCode(int n) {
        if(n==1)
            return {0,1};
        vector<int> res;
        res.push_back(0);res.push_back(1);
        for(int i=2;i<=n;i++){
            int k=res.size()-1;
            for(int j=k;j>=0;j--){
                int x= (1<<(i-1)) + res[j] ; // x=(1<<(i-1)) | res[j]
                res.push_back(x);
            }
        }
        return res;
    }
};

Time: O(2^n)  Space: O(1)
--> as not consider space for storing result and returning it

class Solution {
public:
    vector<int> grayCode(int n) {
        int s= 1<<n;
        vector<int> res(s);
        for(int i=0;i<s;i++){
            res[i]=i^(i>>1);
        }
        return res;
    }
};
